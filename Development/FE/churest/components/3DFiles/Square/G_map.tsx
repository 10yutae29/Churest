/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 g_map.glb -t
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { glbs } from '@/public/assets/glb';

type GLTFResult = GLTF & {
  nodes: {
    큐브: THREE.Mesh;
    큐브_1: THREE.Mesh;
    큐브_2: THREE.Mesh;
  };
  materials: {
    ['매테리얼.017']: THREE.MeshStandardMaterial;
    ['매테리얼.018']: THREE.MeshStandardMaterial;
    ['매테리얼.019']: THREE.MeshStandardMaterial;
  };
};

export function G_map(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(glbs.g_map_glb) as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group position={[0, -2, 0]} rotation={[0, -1.57, 0]} scale={[18, 2, 18]}>
        <mesh
          geometry={nodes.큐브.geometry}
          material={materials['매테리얼.017']}
          receiveShadow
        />
        <mesh
          geometry={nodes.큐브_1.geometry}
          material={materials['매테리얼.018']}
          receiveShadow
        />
        <mesh
          geometry={nodes.큐브_2.geometry}
          material={materials['매테리얼.019']}
          castShadow
        />
      </group>
    </group>
  );
}

useGLTF.preload(glbs.g_map_glb);
