/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 Tree9.glb -t
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { glbs } from '@/public/assets/glb';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    tree9: THREE.Mesh;
  };
  materials: {
    ['Material.008']: THREE.MeshStandardMaterial;
  };
};

export function Tree9(props: JSX.IntrinsicElements['group']) {
  const [angle, setAngle] = useState(0);
  useFrame(() => {
    setAngle((prev) => prev + 1);
  });
  const { nodes, materials } = useGLTF(glbs.tree_9_glb) as GLTFResult;
  return (
    <group {...props} dispose={null} rotation={[0, (Math.PI / 360) * angle, 0]}>
      <mesh
        geometry={nodes.tree9.geometry}
        material={materials['Material.008']}
        position={[0, 2.4, 0]}
        scale={0.2}
      />
    </group>
  );
}

useGLTF.preload(glbs.tree_9_glb);
